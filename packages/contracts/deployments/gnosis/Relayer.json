{
  "address": "0xE4488FC7e7950e662DA5C489EFEf1A3FCa800f69",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "contract IDepositVerifier",
          "name": "_depositVerifier",
          "type": "address"
        },
        {
          "internalType": "contract IWithdrawVerifier",
          "name": "_withdrawVerifier",
          "type": "address"
        },
        {
          "internalType": "contract ISwapVerifier",
          "name": "_swapVerifier",
          "type": "address"
        },
        {
          "internalType": "contract IFinalizeVerifier",
          "name": "_finalizeVerifier",
          "type": "address"
        },
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "contract IGenericRouter",
          "name": "_genericRouter",
          "type": "address"
        },
        {
          "internalType": "contract IAggregationExecutor",
          "name": "_genericExecutor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "modelCommitment",
          "type": "bytes32"
        }
      ],
      "name": "UploadModel",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_A",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOKEN_B",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_cNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_balanceA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balanceB",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositVerifier",
      "outputs": [
        {
          "internalType": "contract IDepositVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_cNode2",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        }
      ],
      "name": "finalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizeVerifier",
      "outputs": [
        {
          "internalType": "contract IFinalizeVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genericExecutor",
      "outputs": [
        {
          "internalType": "contract IAggregationExecutor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genericRouter",
      "outputs": [
        {
          "internalType": "contract IGenericRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHasher",
          "name": "_hasher",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levels",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "modelInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainlinkPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nodeStatusPool",
      "outputs": [
        {
          "internalType": "enum NodeStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapVerifier",
      "outputs": [
        {
          "internalType": "contract ISwapVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum SwapDirection",
              "name": "direction",
              "type": "uint8"
            },
            {
              "internalType": "uint248",
              "name": "amount",
              "type": "uint248"
            }
          ],
          "internalType": "struct ModelOutput",
          "name": "modelOutput",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_1inchV5Data",
          "type": "bytes"
        }
      ],
      "name": "transact",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "transactionResults",
      "outputs": [
        {
          "internalType": "enum SwapDirection",
          "name": "direction",
          "type": "uint8"
        },
        {
          "internalType": "uint120",
          "name": "amountA",
          "type": "uint120"
        },
        {
          "internalType": "uint120",
          "name": "amountB",
          "type": "uint120"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_cModel",
          "type": "bytes32"
        }
      ],
      "name": "uploadModel",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_balanceA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_balanceB",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawVerifier",
      "outputs": [
        {
          "internalType": "contract IWithdrawVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "zeros",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfa775e8e9b2eba7e7fb59a8170abd16985a1562d2304c9317861d2da95020b9f",
  "receipt": {
    "to": null,
    "from": "0x567845983Df071999c3b8e680B3cED559312Bf45",
    "contractAddress": "0xE4488FC7e7950e662DA5C489EFEf1A3FCa800f69",
    "transactionIndex": 2,
    "gasUsed": "5513236",
    "logsBloom": "0x
    "blockHash": "0x7e27a9a15748cb7e1e4c809740c41ebf60857cd859f5314a867345b2d7bbe454",
    "transactionHash": "0xfa775e8e9b2eba7e7fb59a8170abd16985a1562d2304c9317861d2da95020b9f",
    "logs": [],
    "blockNumber": 29089577,
    "cumulativeGasUsed": "5838682",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83",
    "0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1",
    "0x413f1776522196cDc944cFE0979Ee100069A057E",
    "0x423013EdA1E9642E0E4110c88e9615f8aC216C41",
    "0x7558649322a97ef4C5aFA88d7B53d8814925B4C2",
    "0x30F9E0BeC7290A99417452a1bB87F8D420900742",
    "0x2a87Cce88cA9E9cf7C9adC48b7C3cf74Fda34751",
    "0x1111111254EEB25477B68fb85Ed929f73A960582",
    "0x851DE4aE771483bFF6790F79ee78A92dAF400e76"
  ],
  "numDeployments": 1,
  "solcInputHash": "773ce6af152d6a27cb5765c223cc7804",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"contract IDepositVerifier\",\"name\":\"_depositVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IWithdrawVerifier\",\"name\":\"_withdrawVerifier\",\"type\":\"address\"},{\"internalType\":\"contract ISwapVerifier\",\"name\":\"_swapVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IFinalizeVerifier\",\"name\":\"_finalizeVerifier\",\"type\":\"address\"},{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"contract IGenericRouter\",\"name\":\"_genericRouter\",\"type\":\"address\"},{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"_genericExecutor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"modelCommitment\",\"type\":\"bytes32\"}],\"name\":\"UploadModel\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_A\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_B\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_cNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_balanceA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositVerifier\",\"outputs\":[{\"internalType\":\"contract IDepositVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_cNode2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizeVerifier\",\"outputs\":[{\"internalType\":\"contract IFinalizeVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genericExecutor\",\"outputs\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genericRouter\",\"outputs\":[{\"internalType\":\"contract IGenericRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"_hasher\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levels\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modelInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainlinkPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nodeStatusPool\",\"outputs\":[{\"internalType\":\"enum NodeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapVerifier\",\"outputs\":[{\"internalType\":\"contract ISwapVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum SwapDirection\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint248\",\"name\":\"amount\",\"type\":\"uint248\"}],\"internalType\":\"struct ModelOutput\",\"name\":\"modelOutput\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_1inchV5Data\",\"type\":\"bytes\"}],\"name\":\"transact\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"transactionResults\",\"outputs\":[{\"internalType\":\"enum SwapDirection\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"uint120\",\"name\":\"amountA\",\"type\":\"uint120\"},{\"internalType\":\"uint120\",\"name\":\"amountB\",\"type\":\"uint120\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_cModel\",\"type\":\"bytes32\"}],\"name\":\"uploadModel\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_balanceA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_balanceB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawVerifier\",\"outputs\":[{\"internalType\":\"contract IWithdrawVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"zeros\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hashLeftRight(address,bytes32,bytes32)\":{\"details\":\"Hash 2 tree leaves, returns MiMC(_left, _right)\"},\"zeros(uint256)\":{\"details\":\"provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Relayer.sol\":\"Relayer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\",\":weird-erc20/=lib/weird-erc20/src/\"]},\"sources\":{\"contracts/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDepositVerifier {\\n    function verify(\\n        uint256[5] calldata _publicInputs,\\n        bytes calldata _proof\\n    ) external view returns (bool);\\n}\\n\\ninterface IWithdrawVerifier {\\n    function verify(\\n        uint256[5] calldata _publicInputs,\\n        bytes calldata _proof\\n    ) external view returns (bool);\\n}\\n\\ninterface ISwapVerifier {\\n    function verify(\\n        uint256[4] calldata _publicInputs,\\n        bytes calldata _proof\\n    ) external view returns (bool);\\n}\\n\\ninterface IFinalizeVerifier {\\n    function verify(\\n        uint256[3] calldata _publicInputs,\\n        bytes calldata _proof\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9abb94139f2ce3b43e24529956ac86e8c9bfaf956526375b7bfdf8fa767fcfa8\",\"license\":\"MIT\"},\"contracts/MerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IHasher {\\n    function hash(uint256 xL, uint256 xR) external pure returns (uint256 xO);\\n}\\n\\ncontract MerkleTree {\\n    uint256 public constant FIELD_SIZE = type(uint256).max;\\n    uint256 public constant ZERO_VALUE = 0;\\n    IHasher public immutable hasher;\\n\\n    uint32 public levels;\\n\\n    // the following variables are made public for easier testing and debugging and\\n    // are not supposed to be accessed in regular code\\n\\n    // filledSubtrees and roots could be bytes32[size], but using mappings makes it cheaper because\\n    // it removes index range check on every interaction\\n    mapping(uint256 => bytes32) public filledSubtrees;\\n    bytes32 public root;\\n    uint32 public nextIndex = 0;\\n\\n    constructor(uint32 _levels, IHasher _hasher) {\\n        require(_levels > 0, \\\"_levels should be greater than zero\\\");\\n        require(_levels < 32, \\\"_levels should be less than 32\\\");\\n        levels = _levels;\\n        hasher = _hasher;\\n\\n        for (uint32 i = 0; i < _levels; i++) {\\n            filledSubtrees[i] = zeros(i);\\n        }\\n\\n        root = zeros(_levels - 1);\\n    }\\n\\n    /**\\n    @dev Hash 2 tree leaves, returns MiMC(_left, _right)\\n  */\\n    function hashLeftRight(\\n        IHasher _hasher,\\n        bytes32 _left,\\n        bytes32 _right\\n    ) public pure returns (bytes32) {\\n        return bytes32(_hasher.hash(uint256(_left), uint256(_right)));\\n    }\\n\\n    function _insert(bytes32 _leaf) internal returns (uint32 index) {\\n        uint32 _nextIndex = nextIndex;\\n        require(\\n            _nextIndex != uint32(2) ** levels,\\n            \\\"Merkle tree is full. No more leaves can be added\\\"\\n        );\\n        uint32 currentIndex = _nextIndex;\\n        bytes32 currentLevelHash = _leaf;\\n        bytes32 left;\\n        bytes32 right;\\n\\n        for (uint32 i = 0; i < levels; i++) {\\n            if (currentIndex % 2 == 0) {\\n                left = currentLevelHash;\\n                right = zeros(i);\\n                filledSubtrees[i] = currentLevelHash;\\n            } else {\\n                left = filledSubtrees[i];\\n                right = currentLevelHash;\\n            }\\n            currentLevelHash = hashLeftRight(hasher, left, right);\\n            currentIndex /= 2;\\n        }\\n\\n        nextIndex = _nextIndex + 1;\\n        return _nextIndex;\\n    }\\n\\n    /// @dev provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels\\n    function zeros(uint256 i) public view returns (bytes32) {\\n        require(i < uint32(levels), \\\"index out of bound\\\");\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9440bd2ababa6bcfde6d064f31fc6932aba99b1a390c34df054cb0a996ae2870\",\"license\":\"MIT\"},\"contracts/Relayer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {MerkleTree, IHasher} from \\\"./MerkleTree.sol\\\";\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {Vault, IRelayer} from \\\"./Vault.sol\\\";\\nimport {IDepositVerifier, IWithdrawVerifier, ISwapVerifier, IFinalizeVerifier} from \\\"./IVerifier.sol\\\";\\nimport {IGenericRouter, IAggregationExecutor, SwapDescription} from \\\"./interfaces/I1nchRouter.sol\\\";\\nimport {IERC20} from \\\"./libraries/UniERC20.sol\\\";\\n\\nenum NodeStatus {\\n    EMPTY,\\n    TRANSACTED,\\n    NULLIFIED\\n}\\n\\nenum SwapDirection {\\n    A2B,\\n    B2A\\n}\\n\\nstruct ModelOutput {\\n    SwapDirection direction;\\n    uint248 amount;\\n}\\n\\nstruct ModelInput {\\n    uint256 chainlinkPrice;\\n}\\n\\nstruct TxResult {\\n    SwapDirection direction;\\n    uint120 amountA;\\n    uint120 amountB;\\n}\\n\\ncontract Relayer is IRelayer, MerkleTree {\\n    \\n    ERC20 immutable public TOKEN_A;\\n    ERC20 immutable public TOKEN_B;\\n    IDepositVerifier public depositVerifier;\\n    IWithdrawVerifier public withdrawVerifier;\\n    ISwapVerifier public swapVerifier;\\n    IFinalizeVerifier public finalizeVerifier;\\n    IGenericRouter public genericRouter;\\n    IAggregationExecutor public genericExecutor;\\n    ModelInput public modelInput;\\n    mapping(bytes32 => NodeStatus) public nodeStatusPool;\\n    mapping(bytes32 => TxResult) public transactionResults;\\n\\n    event UploadModel(\\n        address indexed relayer,\\n        address indexed trader,\\n        address vault,\\n        bytes32 modelCommitment\\n    );\\n\\n    constructor(\\n        ERC20 _tokenA,\\n        ERC20 _tokenB,\\n        IDepositVerifier _depositVerifier,\\n        IWithdrawVerifier _withdrawVerifier,\\n        ISwapVerifier _swapVerifier,\\n        IFinalizeVerifier _finalizeVerifier,\\n        IHasher _hasher,\\n        IGenericRouter _genericRouter,\\n        IAggregationExecutor _genericExecutor\\n    ) MerkleTree(8, _hasher) {\\n        TOKEN_A = _tokenA;\\n        TOKEN_B = _tokenB;\\n        depositVerifier = _depositVerifier;\\n        withdrawVerifier = _withdrawVerifier;\\n        swapVerifier = _swapVerifier;\\n        finalizeVerifier = _finalizeVerifier;\\n        genericRouter = _genericRouter;\\n        genericExecutor = _genericExecutor;\\n    }\\n\\n    function deposit(\\n        bytes32 _cNode,\\n        uint256 _balanceA,\\n        uint256 _balanceB,\\n        address _vault,\\n        bytes calldata _proof\\n    ) public override returns (uint32) {\\n        uint256[5] memory _publicInputs;\\n        _publicInputs[0] = uint256(_cNode);\\n        _publicInputs[1] = uint256(Vault(_vault).cModel());\\n        _publicInputs[2] = uint256(_balanceA);\\n        _publicInputs[3] = uint256(_balanceB);\\n        _publicInputs[4] = uint256(uint160(_vault));\\n        require(msg.sender == _vault, \\\"vault not match\\\");\\n        require(\\n            depositVerifier.verify(_publicInputs, _proof),\\n            \\\"deposit: verify failed\\\"\\n        );\\n\\n        TOKEN_A.transferFrom(_vault, address(this), _balanceA);\\n        TOKEN_B.transferFrom(_vault, address(this), _balanceB);\\n\\n        return MerkleTree._insert(_cNode);\\n    }\\n\\n    function withdraw(\\n        bytes32 _nullifier,\\n        uint256 _balanceA,\\n        uint256 _balanceB,\\n        address _vault,\\n        bytes calldata _proof\\n    ) public override {\\n        uint256[5] memory _publicInputs;\\n        _publicInputs[0] = uint256(root);\\n        _publicInputs[1] = uint256(_nullifier);\\n        _publicInputs[2] = uint256(_balanceA);\\n        _publicInputs[3] = uint256(_balanceB);\\n        _publicInputs[4] = uint256(uint160(_vault));\\n        require(msg.sender == _vault, \\\"vault not match\\\");\\n        require(\\n            nodeStatusPool[_nullifier] == NodeStatus.TRANSACTED,\\n            \\\"transact: invalid node state\\\"\\n        );\\n        require(\\n            withdrawVerifier.verify(_publicInputs, _proof),\\n            \\\"withdraw: verify failed\\\"\\n        );\\n\\n        TOKEN_A.transferFrom(address(this), _vault, _balanceA);\\n        TOKEN_B.transferFrom(address(this), _vault, _balanceB);\\n\\n        nodeStatusPool[_nullifier] = NodeStatus.NULLIFIED;\\n    }\\n\\n    function transact(\\n        bytes32 _nullifier,\\n        ModelOutput calldata modelOutput,\\n        bytes calldata _proof,\\n        bytes calldata _1inchV5Data\\n    ) public {\\n        uint256[4] memory _publicInputs;\\n        _publicInputs[0] = uint256(MerkleTree.root);\\n        _publicInputs[1] = uint256(_nullifier);\\n        _publicInputs[2] = modelInput.chainlinkPrice;\\n        _publicInputs[3] = uint256(bytes32(abi.encodePacked(modelOutput.direction, modelOutput.amount)));\\n        require(\\n            nodeStatusPool[_nullifier] == NodeStatus.EMPTY,\\n            \\\"transact: invalid node state\\\"\\n        );\\n        require(\\n            swapVerifier.verify(_publicInputs, _proof),\\n            \\\"transact: verify failed\\\"\\n        );\\n        \\n        transactionResults[_nullifier] = _transact(modelOutput, _1inchV5Data);\\n        nodeStatusPool[_nullifier] = NodeStatus.TRANSACTED;\\n    }\\n\\n    function finalize(\\n        bytes32 _nullifier,\\n        bytes32 _cNode2,\\n        bytes calldata _proof\\n    ) public {\\n        uint256[3] memory _publicInputs;\\n        _publicInputs[0] = uint256(MerkleTree.root);\\n        _publicInputs[1] = uint256(_nullifier);\\n        _publicInputs[2] = uint256(_cNode2);\\n        require(\\n            nodeStatusPool[_nullifier] == NodeStatus.TRANSACTED,\\n            \\\"transact: invalid node state\\\"\\n        );\\n        require(\\n            finalizeVerifier.verify(_publicInputs, _proof),\\n            \\\"finalize: verify failed\\\"\\n        );\\n        \\n        MerkleTree._insert(_cNode2);\\n        delete transactionResults[_nullifier];\\n        nodeStatusPool[_nullifier] = NodeStatus.NULLIFIED;\\n    }\\n\\n    function uploadModel(bytes32 _cModel) public returns(Vault) {\\n        Vault vault = new Vault(IRelayer(address(this)), msg.sender, _cModel);\\n        emit UploadModel(address(this), msg.sender, address(vault), _cModel);\\n        return vault;\\n    }\\n\\n    function _transact(\\n        ModelOutput calldata _mOutput,\\n        bytes calldata _1inchV5Data\\n    ) private returns(TxResult memory txResult) {\\n        SwapDescription memory _desc;\\n        if (_mOutput.direction == SwapDirection.A2B) {\\n            _desc.srcToken = IERC20(address(TOKEN_A));\\n            _desc.dstToken = IERC20(address(TOKEN_B));\\n        } else {\\n            _desc.srcToken = IERC20(address(TOKEN_B));\\n            _desc.dstToken = IERC20(address(TOKEN_A));            \\n        }\\n        _desc.srcReceiver = payable(address(this));\\n        _desc.dstReceiver = payable(address(this));\\n        _desc.amount = _mOutput.amount;\\n        _desc.minReturnAmount = 0;\\n        _desc.flags = 4;\\n\\n        (uint256 returnAmount, uint256 spentAmount) = genericRouter.swap(\\n            genericExecutor, _desc, abi.encodePacked(), _1inchV5Data\\n        );\\n        txResult.direction = _mOutput.direction;\\n        if (_mOutput.direction == SwapDirection.A2B) {\\n            txResult.amountA = uint120(spentAmount);\\n            txResult.amountB = uint120(returnAmount);\\n        } else {\\n            txResult.amountB = uint120(spentAmount);\\n            txResult.amountA = uint120(returnAmount); \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x12ef3f3bb29b2e0822ee8f26c00630dd8bb916943a697dd5df5f7146fa5f9bb7\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\nimport {ERC20} from \\\"solmate/tokens/ERC20.sol\\\";\\nimport {Owned} from \\\"solmate/auth/Owned.sol\\\";\\nimport {IGenericRouter, IAggregationExecutor, SwapDescription} from \\\"./interfaces/I1nchRouter.sol\\\";\\nimport {IERC20} from \\\"./libraries/UniERC20.sol\\\";\\n\\ninterface IRelayer {\\n    function deposit(\\n        bytes32 _cNode,\\n        uint256 _balanceA,\\n        uint256 _balanceB,\\n        address _vault,\\n        bytes calldata _proof\\n    ) external returns (uint32);\\n\\n    function withdraw(\\n        bytes32 _nullifier,\\n        uint256 _balanceA,\\n        uint256 _balanceB,\\n        address _vault,\\n        bytes calldata _proof\\n    ) external;\\n\\n    function TOKEN_A() external returns (ERC20);\\n    function TOKEN_B() external returns (ERC20);\\n    function genericRouter() external returns (IGenericRouter);\\n    function genericExecutor() external returns (IAggregationExecutor);\\n}\\n\\nenum VaultState {\\n    DEPOSIT,\\n    WAITING,\\n    WITHDRAW\\n}\\n\\ncontract Vault is Owned {\\n    \\n    IRelayer immutable public relayer;\\n    bytes32 public cModel;\\n    mapping(address => uint256) public userWeights;\\n    uint256 public totalWeights;\\n    uint256 public afterBalance;\\n    VaultState public state;\\n\\n    constructor(\\n        IRelayer _relayer,\\n        address _trader,\\n        bytes32 _cModel\\n    ) Owned(_trader) {\\n        relayer = _relayer;\\n        cModel = _cModel;\\n    }\\n\\n    modifier requireState(VaultState _state) {\\n        require(state == _state, \\\"Invalid Vault state\\\");\\n        _;\\n    }\\n\\n    function userDeposit(uint256 amount) public requireState(VaultState.DEPOSIT) {\\n        relayer.TOKEN_A().transferFrom(msg.sender, address(this), amount);\\n        \\n        userWeights[msg.sender] += amount;\\n        totalWeights += amount;\\n    }\\n\\n    function depositToRelayer(\\n        bytes32 _cNode,\\n        bytes calldata _proof,\\n        bytes calldata _1inchV5Data\\n    ) public requireState(VaultState.DEPOSIT) onlyOwner {\\n        uint256 initBalanceA = relayer.TOKEN_A().balanceOf(address(this));\\n        SwapDescription memory desc = SwapDescription(\\n            IERC20(address(relayer.TOKEN_A())),\\n            IERC20(address(relayer.TOKEN_B())),\\n            payable(address(this)),\\n            payable(address(this)), \\n            initBalanceA / 2,\\n            0,\\n            4\\n        );\\n        relayer.genericRouter().swap(\\n            relayer.genericExecutor(), desc, abi.encodePacked(), _1inchV5Data\\n        );\\n\\n        uint256 balanceA = relayer.TOKEN_A().balanceOf(address(this));\\n        uint256 balanceB = relayer.TOKEN_B().balanceOf(address(this));\\n        relayer.deposit(_cNode, balanceA, balanceB, address(this), _proof);\\n        state = VaultState.WAITING;\\n    }\\n\\n    function withdrawFromRelayer(\\n        bytes32 _nullifier,\\n        uint256 _balanceA,\\n        uint256 _balanceB,\\n        bytes calldata _proof,\\n        bytes calldata _1inchV5Data\\n    ) public requireState(VaultState.WAITING) onlyOwner {\\n        relayer.withdraw(_nullifier, _balanceA, _balanceB, address(this), _proof);\\n        uint256 afterBalanceB = relayer.TOKEN_B().balanceOf(address(this));\\n        SwapDescription memory desc = SwapDescription(\\n            IERC20(address(relayer.TOKEN_B())),\\n            IERC20(address(relayer.TOKEN_A())),\\n            payable(address(this)),\\n            payable(address(this)), \\n            afterBalanceB / 2,\\n            0,\\n            4\\n        );\\n        relayer.genericRouter().swap(\\n            relayer.genericExecutor(), desc, abi.encodePacked(), _1inchV5Data\\n        );\\n        afterBalance = relayer.TOKEN_A().balanceOf(address(this));\\n        state = VaultState.WITHDRAW;\\n    }\\n\\n    function userWithdraw(address to) public requireState(VaultState.WITHDRAW) {       \\n        uint256 amount = afterBalance * userWeights[to] / totalWeights;\\n        relayer.TOKEN_A().transferFrom(address(this), to, amount);\\n    }\\n}\",\"keccak256\":\"0xcebef41ee3aebd56658ead20c21e722d753d6ee2176d2b2dff9f87204b931eab\",\"license\":\"MIT\"},\"contracts/interfaces/I1nchRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {SafeERC20} from \\\"../libraries/SafeERC20.sol\\\";\\nimport {UniERC20, IERC20} from \\\"../libraries/UniERC20.sol\\\";\\n\\nstruct SwapDescription {\\n    IERC20 srcToken;\\n    IERC20 dstToken;\\n    address payable srcReceiver;\\n    address payable dstReceiver;\\n    uint256 amount;\\n    uint256 minReturnAmount;\\n    uint256 flags;\\n}\\n\\ninterface IAggregationExecutor { \\n    /// @notice propagates information about original msg.sender and executes arbitrary data \\n    function execute(address msgSender) external payable;  // 0x4b64e492 \\n}\\n\\ninterface IGenericRouter {\\n\\n    function swap(\\n        IAggregationExecutor executor,\\n        SwapDescription calldata desc,\\n        bytes calldata permit,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount, uint256 spentAmount);\\n}\",\"keccak256\":\"0x2b4cb41453ba4fa6f08d96e83a39eaf5a3c7a839f4d8506846aead7cbd669050\",\"license\":\"MIT\"},\"contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbbb219886412a339a7f84b0850f700311dd2b3a106919ae54fa0a215d847a3b2\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20MetadataUppercase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20MetadataUppercase {\\n    function NAME() external view returns (string memory); // solhint-disable-line func-name-mixedcase\\n\\n    function SYMBOL() external view returns (string memory); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x42e8625b32dfa9746df2b79c66deb1cb6f085d8292a0e19f60339ce9dd7e9803\",\"license\":\"MIT\"},\"contracts/interfaces/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPermit2 {\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n    /// @notice The permit message signed for a single token allownce\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n    /// @notice Packed allowance\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n}\\n\",\"keccak256\":\"0x63209a082f66ecb584b86e412b3dd0010e9675bc19bc1f80a75437311df7ec11\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    event Deposit(address indexed dst, uint wad);\\n\\n    event Withdrawal(address indexed src, uint wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc8132cbe41b3dc902df69adbbdf230bbde79647c676d064c58bc6092de6077d5\",\"license\":\"MIT\"},\"contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x953c4a195ae066e90aac2ccfcef3121e4c5b74f2cf7cb4add341a7df7df2d00e\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/**\\n * @title Implements efficient safe methods for ERC20 interface.\\n * @notice Compared to the standard ERC20, this implementation offers several enhancements:\\n * 1. more gas-efficient, providing significant savings in transaction costs.\\n * 2. support for different permit implementations\\n * 3. forceApprove functionality\\n * 4. support for WETH deposit and withdraw\\n */\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    // Uniswap Permit2 address\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGTH_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\n    /**\\n     * @notice Fetches the balance of a specific ERC20 token held by an account.\\n     * Consumes less gas then regular `ERC20.balanceOf`.\\n     * @param token The IERC20 token contract for which the balance will be fetched.\\n     * @param account The address of the account whose token balance will be fetched.\\n     * @return tokenBalance The balance of the specified ERC20 token held by the account.\\n     */\\n    function safeBalanceOf(\\n        IERC20 token,\\n        address account\\n    ) internal view returns(uint256 tokenBalance) {\\n        bytes4 selector = IERC20.balanceOf.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            mstore(0x00, selector)\\n            mstore(0x04, account)\\n            let success := staticcall(gas(), token, 0x00, 0x24, 0x00, 0x20)\\n            tokenBalance := mload(0)\\n\\n            if or(iszero(success), lt(returndatasize(), 0x20)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another.\\n     * @dev If permit2 is true, uses the Permit2 standard; otherwise uses the standard ERC20 transferFrom. \\n     * Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     * @param permit2 If true, uses the Permit2 standard for the transfer; otherwise uses the standard ERC20 transferFrom.\\n     */\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            safeTransferFromPermit2(token, from, to, amount);\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the ERC20 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens from one address to another using the Permit2 standard.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param from The address from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param amount The amount of tokens to transfer.\\n     */\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(_PERMIT2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /**\\n     * @notice Attempts to safely transfer tokens to another address.\\n     * @dev Either requires `true` in return data, or requires target to be smart-contract and empty return data.\\n     * @param token The IERC20 token contract from which the tokens will be transferred.\\n     * @param to The address to which the tokens will be transferred.\\n     * @param value The amount of tokens to transfer.\\n     */\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @notice Attempts to approve a spender to spend a certain amount of tokens.\\n     * @dev If `approve(from, to, amount)` fails, it tries to set the allowance to zero, and retries the `approve` call.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     */\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely increases the allowance of a spender.\\n     * @dev Increases with safe math check. Checks if the increased allowance will overflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to increase the allowance by.\\n     */\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /**\\n     * @notice Safely decreases the allowance of a spender.\\n     * @dev Decreases with safe math check. Checks if the decreased allowance will underflow, if yes, then it reverts the transaction.\\n     * Then uses `forceApprove` to increase the allowance.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to decrease the allowance by.\\n     */\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with custom owner and spender parameters. \\n     * Permit type is determined automatically based on permit calldata (IERC20Permit, IDaiLikePermit, and IPermit2).\\n     * @dev Wraps `tryPermit` function and forwards revert reason if permit fails.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param owner The owner of the tokens for which the permit is made.\\n     * @param spender The spender allowed to spend the tokens by the permit.\\n     * @param permit The permit data to be used in the function call.\\n     */\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    /**\\n     * @notice Attempts to execute the `permit` function on the provided token with the sender and contract as parameters.\\n     * @dev Invokes `tryPermit` with sender as owner and contract as spender.\\n     * @param token The IERC20 token to execute the permit function on.\\n     * @param permit The permit data to be used in the function call.\\n     * @return success Returns true if the permit function was successfully executed, false otherwise.\\n     */\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    /**\\n     * @notice The function attempts to call the permit function on a given ERC20 token.\\n     * @dev The function is designed to support a variety of permit functions, namely: IERC20Permit, IDaiLikePermit, and IPermit2.\\n     * It accommodates both Compact and Full formats of these permit types.\\n     * Please note, it is expected that the `expiration` parameter for the compact Permit2 and the `deadline` parameter \\n     * for the compact Permit are to be incremented by one before invoking this function. This approach is motivated by\\n     * gas efficiency considerations; as the unlimited expiration period is likely to be the most common scenario, and \\n     * zeros are cheaper to pass in terms of gas cost. Thus, callers should increment the expiration or deadline by one\\n     * before invocation for optimized performance.\\n     * @param token The address of the ERC20 token on which to call the permit function.\\n     * @param owner The owner of the tokens. This address should have signed the off-chain permit.\\n     * @param spender The address which will be approved for transfer of tokens.\\n     * @param permit The off-chain permit data, containing different fields depending on the type of permit function.\\n     * @return success A boolean indicating whether the permit call was successful.\\n     */\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        // load function selectors for different permit standards\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n\\n            // Switch case for different permit lengths, indicating different permit standards\\n            switch permit.length\\n            // Compact IERC20Permit\\n            case 100 {\\n                mstore(ptr, permitSelector)     // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20))) // loads permit.offset 0x20..0x23\\n                    let vs := calldataload(add(permit.offset, 0x44))                 // loads permit.offset 0x44..0x63\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20)            // store value     = copy permit.offset 0x00..0x19\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))                     // store deadline  = deadline - 1\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))                // store v         = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // store r         = copy permit.offset 0x24..0x43\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))                   // store s         = vs without most significant bit\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // Compact IDaiLikePermit\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)  // store selector\\n                mstore(add(ptr, 0x04), owner)   // store owner\\n                mstore(add(ptr, 0x24), spender) // store spender\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04))) // loads permit.offset 0x04..0x07\\n                    let vs := calldataload(add(permit.offset, 0x28))               // loads permit.offset 0x28..0x47\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset))) // store nonce   = copy permit.offset 0x00..0x03\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))                        // store expiry  = expiry - 1\\n                    mstore(add(ptr, 0x84), true)                                  // store allowed = true\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))                 // store v       = most significant bit of vs + 27 (27 or 28)\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20)  // store r       = copy permit.offset 0x08..0x27\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))                    // store s       = vs without most significant bit\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // IERC20Permit\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            // IDaiLikePermit\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            // Compact IPermit2\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)  // store selector\\n                mstore(add(ptr, 0x04), owner) // store owner\\n                mstore(add(ptr, 0x24), token) // store token\\n\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14)             // store amount = copy permit.offset 0x00..0x13\\n                // and(0xffffffffffff, ...) - conversion to uint48 \\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // store expiration = ((permit.offset 0x14..0x17 - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // store nonce = copy permit.offset 0x18..0x1b\\n                mstore(add(ptr, 0xa4), spender)                               // store spender\\n                // and(0xffffffffffff, ...) - conversion to uint48\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // store sigDeadline = ((permit.offset 0x1c..0x1f - 1) & 0xffffffffffff)\\n                mstore(add(ptr, 0xe4), 0x100)                                 // store offset = 256\\n                mstore(add(ptr, 0x104), 0x40)                                 // store length = 64\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // store r      = copy permit.offset 0x20..0x3f\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // store vs     = copy permit.offset 0x40..0x5f\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // IPermit2\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length) // copy permit calldata\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            // Unknown\\n            default {\\n                mstore(ptr, _PERMIT_LENGTH_ERROR)\\n                revert(ptr, 4)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes a low level call to a token contract, making it resistant to reversion and erroneous boolean returns.\\n     * @param token The IERC20 token contract on which the call will be made.\\n     * @param selector The function signature that is to be called on the token contract.\\n     * @param to The address to which the token amount will be transferred.\\n     * @param amount The token amount to be transferred.\\n     * @return success A boolean indicating if the call was successful. Returns 'true' on success and 'false' on failure. \\n     * In case of success but no returned data, validates that the contract code exists.\\n     * In case of returned data, ensures that it's a boolean `true`.\\n     */\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely deposits a specified amount of Ether into the IWETH contract. Consumes less gas then regular `IWETH.deposit`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of Ether to deposit into the IWETH contract.\\n     */\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        if (amount > 0) {\\n            bytes4 selector = IWETH.deposit.selector;\\n            assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                mstore(0, selector)\\n                if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract. Consumes less gas then regular `IWETH.withdraw`.\\n     * @dev Uses inline assembly to interact with the IWETH contract.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     */\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Safely withdraws a specified amount of wrapped Ether from the IWETH contract to a specified recipient.\\n     * Consumes less gas then regular `IWETH.withdraw`.\\n     * @param weth The IWETH token contract.\\n     * @param amount The amount of wrapped Ether to withdraw from the IWETH contract.\\n     * @param to The recipient of the withdrawn Ether.\\n     */\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(_RAW_CALL_GAS_LIMIT, to, amount, 0, 0, 0, 0)) {\\n                    let ptr := mload(0x40)\\n                    returndatacopy(ptr, 0, returndatasize())\\n                    revert(ptr, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1c050d9eea8792471f3e92a8423c1900287452fe2cb8457208f8955e4ca556cc\",\"license\":\"MIT\"},\"contracts/libraries/StringUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Library with gas-efficient string operations\\nlibrary StringUtil {\\n    function toHex(uint256 value) internal pure returns (string memory) {\\n        return toHex(abi.encodePacked(value));\\n    }\\n\\n    function toHex(address value) internal pure returns (string memory) {\\n        return toHex(abi.encodePacked(value));\\n    }\\n\\n    /// @dev this is the assembly adaptation of highly optimized toHex16 code from Mikhail Vladimirov\\n    /// https://stackoverflow.com/a/69266989\\n    function toHex(bytes memory data) internal pure returns (string memory result) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            function _toHex16(input) -> output {\\n                output := or(\\n                    and(input, 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000),\\n                    shr(64, and(input, 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000))\\n                )\\n                output := or(\\n                    and(output, 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000),\\n                    shr(32, and(output, 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000))\\n                )\\n                output := or(\\n                    and(output, 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000),\\n                    shr(16, and(output, 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000))\\n                )\\n                output := or(\\n                    and(output, 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000),\\n                    shr(8, and(output, 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000))\\n                )\\n                output := or(\\n                    shr(4, and(output, 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000)),\\n                    shr(8, and(output, 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00))\\n                )\\n                output := add(\\n                    add(0x3030303030303030303030303030303030303030303030303030303030303030, output),\\n                    mul(\\n                        and(\\n                            shr(4, add(output, 0x0606060606060606060606060606060606060606060606060606060606060606)),\\n                            0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F\\n                        ),\\n                        7 // Change 7 to 39 for lower case output\\n                    )\\n                )\\n            }\\n\\n            result := mload(0x40)\\n            let length := mload(data)\\n            let resultLength := shl(1, length)\\n            let toPtr := add(result, 0x22) // 32 bytes for length + 2 bytes for '0x'\\n            mstore(0x40, add(toPtr, resultLength)) // move free memory pointer\\n            mstore(add(result, 2), 0x3078) // 0x3078 is right aligned so we write to `result + 2`\\n            // to store the last 2 bytes in the beginning of the string\\n            mstore(result, add(resultLength, 2)) // extra 2 bytes for '0x'\\n\\n            for {\\n                let fromPtr := add(data, 0x20)\\n                let endPtr := add(fromPtr, length)\\n            } lt(fromPtr, endPtr) {\\n                fromPtr := add(fromPtr, 0x20)\\n            } {\\n                let rawData := mload(fromPtr)\\n                let hexData := _toHex16(rawData)\\n                mstore(toPtr, hexData)\\n                toPtr := add(toPtr, 0x20)\\n                hexData := _toHex16(shl(128, rawData))\\n                mstore(toPtr, hexData)\\n                toPtr := add(toPtr, 0x20)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47867f007afaefa24c40fe487b968f553f4551c941dfa53afe8cc29e1fb68f38\",\"license\":\"MIT\"},\"contracts/libraries/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20MetadataUppercase.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./StringUtil.sol\\\";\\n\\n/// @title Library, which allows usage of ETH as ERC20 and ERC20 itself. Uses SafeERC20 library for ERC20 interface.\\nlibrary UniERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    error InsufficientBalance();\\n    error ApproveCalledOnETH();\\n    error NotEnoughValue();\\n    error FromIsNotSender();\\n    error ToIsNotThis();\\n    error ETHTransferFailed();\\n\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    IERC20 private constant _ZERO_ADDRESS = IERC20(address(0));\\n\\n    /// @dev Returns true if `token` is ETH.\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n    }\\n\\n    /// @dev Returns `account` ERC20 `token` balance.\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return account.balance;\\n        } else {\\n            return token.balanceOf(account);\\n        }\\n    }\\n\\n    /// @dev `token` transfer `to` `amount`.\\n    /// Note that this function does nothing in case of zero amount.\\n    function uniTransfer(\\n        IERC20 token,\\n        address payable to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                if (address(this).balance < amount) revert InsufficientBalance();\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, ) = to.call{value: amount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n                if (!success) revert ETHTransferFailed();\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev `token` transfer `from` `to` `amount`.\\n    /// Note that this function does nothing in case of zero amount.\\n    function uniTransferFrom(\\n        IERC20 token,\\n        address payable from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                if (msg.value < amount) revert NotEnoughValue();\\n                if (from != msg.sender) revert FromIsNotSender();\\n                if (to != address(this)) revert ToIsNotThis();\\n                if (msg.value > amount) {\\n                    // Return remainder if exist\\n                    unchecked {\\n                        // solhint-disable-next-line avoid-low-level-calls\\n                        (bool success, ) = from.call{value: msg.value - amount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n                        if (!success) revert ETHTransferFailed();\\n                    }\\n                }\\n            } else {\\n                token.safeTransferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `token` symbol from ERC20 metadata.\\n    function uniSymbol(IERC20 token) internal view returns (string memory) {\\n        return _uniDecode(token, IERC20Metadata.symbol.selector, IERC20MetadataUppercase.SYMBOL.selector);\\n    }\\n\\n    /// @dev Returns `token` name from ERC20 metadata.\\n    function uniName(IERC20 token) internal view returns (string memory) {\\n        return _uniDecode(token, IERC20Metadata.name.selector, IERC20MetadataUppercase.NAME.selector);\\n    }\\n\\n    /// @dev Reverts if `token` is ETH, otherwise performs ERC20 forceApprove.\\n    function uniApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (isETH(token)) revert ApproveCalledOnETH();\\n\\n        token.forceApprove(to, amount);\\n    }\\n\\n    /// @dev 20K gas is provided to account for possible implementations of name/symbol\\n    /// (token implementation might be behind proxy or store the value in storage)\\n    function _uniDecode(\\n        IERC20 token,\\n        bytes4 lowerCaseSelector,\\n        bytes4 upperCaseSelector\\n    ) private view returns (string memory result) {\\n        if (isETH(token)) {\\n            return \\\"ETH\\\";\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{gas: 20000}(\\n            abi.encodeWithSelector(lowerCaseSelector)\\n        );\\n        if (!success) {\\n            (success, data) = address(token).staticcall{gas: 20000}(abi.encodeWithSelector(upperCaseSelector));\\n        }\\n\\n        if (success && data.length >= 0x40) {\\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\\n            /*\\n                return data is padded up to 32 bytes with ABI encoder also sometimes\\n                there is extra 32 bytes of zeros padded in the end:\\n                https://github.com/ethereum/solidity/issues/10170\\n                because of that we can't check for equality and instead check\\n                that overall data length is greater or equal than string length + extra 64 bytes\\n            */\\n            if (offset == 0x20 && data.length >= 0x40 + len) {\\n                assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                    result := add(data, 0x40)\\n                }\\n                return result;\\n            }\\n        }\\n        if (success && data.length == 32) {\\n            uint256 len = 0;\\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\\n                unchecked {\\n                    len++;\\n                }\\n            }\\n\\n            if (len > 0) {\\n                assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                    mstore(data, len)\\n                }\\n                return string(data);\\n            }\\n        }\\n\\n        return StringUtil.toHex(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x17a81163027008404f1446b8db47970855cae660a18d1d0d908faaef641cc97b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\",\"keccak256\":\"0xc7134e0f63b0adcee02bf4b15efb2d0d4b1c03ae0d127dc90d846da4cab23a76\",\"license\":\"MIT\"},\"lib/solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"},\"lib/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001965760003560e01c80638de533a411620000f3578063e829558811620000a5578063ed33639f116200007b578063ed33639f14620004d9578063f178e47c14620004fb578063fc7e9c6f1462000531578063ff709ee814620005535762000196565b8063e8295588146200045f578063ebf0c7171462000495578063ec73295914620004b75762000196565b80638de533a4146200036f5780638ea3099e1462000391578063aefb78d014620003c7578063c4b5239f14620003e7578063caff03391462000407578063dcea75ee146200043d5762000196565b8063499f712e116200014d578063499f712e14620002655780634ecf518b1462000287578063513a4f0714620002a957806361c3305c14620002e1578063823db3d21462000317578063864eb164146200034d5762000196565b80631409d409146200019b57806314fd7b3514620001bb57806326120c8814620001dd57806339cfe5ff14620001ff578063414a37ba1462000221578063479015cd1462000243575b600080fd5b620001b96004803603810190620001b39190620020bf565b62000575565b005b620001c5620008f8565b604051620001d4919062002202565b60405180910390f35b620001e76200091e565b604051620001f6919062002244565b60405180910390f35b6200020962000944565b60405162000218919062002286565b60405180910390f35b6200022b6200096a565b6040516200023a9190620022be565b60405180910390f35b6200024d6200098e565b6040516200025c9190620022be565b60405180910390f35b6200026f6200099a565b6040516200027e919062002300565b60405180910390f35b62000291620009be565b604051620002a091906200233e565b60405180910390f35b620002c76004803603810190620002c191906200235b565b620009d2565b604051620002d89392919062002439565b60405180910390f35b620002ff6004803603810190620002f991906200235b565b62000a3f565b6040516200030e9190620024c7565b60405180910390f35b6200033560048036038101906200032f91906200255a565b62000a5f565b6040516200034491906200233e565b60405180910390f35b6200035762000e59565b60405162000366919062002629565b60405180910390f35b6200037962000e7f565b6040516200038891906200266b565b60405180910390f35b620003af6004803603810190620003a99190620026cd565b62000ea5565b604051620003be91906200273a565b60405180910390f35b620003e56004803603810190620003df919062002757565b62000f3a565b005b620004056004803603810190620003ff91906200255a565b620011e9565b005b6200042560048036038101906200041f91906200235b565b62001632565b604051620004349190620027fc565b60405180910390f35b62000447620016e6565b6040516200045691906200283e565b60405180910390f35b6200047d60048036038101906200047791906200285b565b6200170c565b6040516200048c91906200273a565b60405180910390f35b6200049f62001775565b604051620004ae91906200273a565b60405180910390f35b620004c16200177b565b604051620004d09190620022be565b60405180910390f35b620004e362001780565b604051620004f29190620028b2565b60405180910390f35b6200051960048036038101906200051391906200285b565b620017a4565b6040516200052891906200273a565b60405180910390f35b6200053b620017bc565b6040516200054a91906200233e565b60405180910390f35b6200055d620017d2565b6040516200056c919062002300565b60405180910390f35b6200057f62001e84565b60025460001c816000600481106200059c576200059b620028cf565b5b6020020181815250508660001c81600160048110620005c057620005bf620028cf565b5b60200201818152505060096000015481600260048110620005e657620005e5620028cf565b5b60200201818152505085600001602081019062000604919062002926565b866020016020810190620006199190620029b4565b6040516020016200062c92919062002a5e565b604051602081830303815290604052620006469062002acd565b60001c8160036004811062000660576200065f620028cf565b5b6020020181815250506000600281111562000680576200067f6200238d565b5b600a600089815260200190815260200160002060009054906101000a900460ff166002811115620006b657620006b56200238d565b5b14620006f9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006f09062002b9e565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663404568b58287876040518463ffffffff1660e01b81526004016200075a9392919062002cdf565b602060405180830381865afa15801562000778573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200079e919062002d52565b620007e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007d79062002dd4565b60405180910390fd5b620007ed868484620017f6565b600b600089815260200190815260200160002060008201518160000160006101000a81548160ff021916908360018111156200082e576200082d6200238d565b5b021790555060208201518160000160016101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff16021790555060408201518160000160106101000a8154816effffffffffffffffffffffffffffff02191690836effffffffffffffffffffffffffffff1602179055509050506001600a600089815260200190815260200160002060006101000a81548160ff02191690836002811115620008ea57620008e96200238d565b5b021790555050505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b60098060000154905081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900463ffffffff1681565b600b6020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a90046effffffffffffffffffffffffffffff16908060000160109054906101000a90046effffffffffffffffffffffffffffff16905083565b600a6020528060005260406000206000915054906101000a900460ff1681565b600062000a6b62001ea6565b8760001c8160006005811062000a865762000a85620028cf565b5b6020020181815250508473ffffffffffffffffffffffffffffffffffffffff1663b2b4e62f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000adb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b01919062002e0d565b60001c8160016005811062000b1b5762000b1a620028cf565b5b602002018181525050868160026005811062000b3c5762000b3b620028cf565b5b602002018181525050858160036005811062000b5d5762000b5c620028cf565b5b6020020181815250508473ffffffffffffffffffffffffffffffffffffffff168160046005811062000b945762000b93620028cf565b5b6020020181815250508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000c0e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c059062002e8f565b60405180910390fd5b600360049054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663839ded658286866040518463ffffffff1660e01b815260040162000c6f9392919062002f41565b602060405180830381865afa15801562000c8d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000cb3919062002d52565b62000cf5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000cec9062002fc7565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd86308a6040518463ffffffff1660e01b815260040162000d549392919062002ffa565b6020604051808303816000875af115801562000d74573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d9a919062002d52565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd8630896040518463ffffffff1660e01b815260040162000dfa9392919062002ffa565b6020604051808303816000875af115801562000e1a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e40919062002d52565b5062000e4c8862001cbe565b9150509695505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008373ffffffffffffffffffffffffffffffffffffffff1663a78dac0d8460001c8460001c6040518363ffffffff1660e01b815260040162000eea92919062003037565b602060405180830381865afa15801562000f08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f2e91906200307b565b60001b90509392505050565b62000f4462001ec8565b60025460001c8160006003811062000f615762000f60620028cf565b5b6020020181815250508460001c8160016003811062000f855762000f84620028cf565b5b6020020181815250508360001c8160026003811062000fa95762000fa8620028cf565b5b6020020181815250506001600281111562000fc95762000fc86200238d565b5b600a600087815260200190815260200160002060009054906101000a900460ff16600281111562000fff5762000ffe6200238d565b5b1462001042576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010399062002b9e565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637509e3798285856040518463ffffffff1660e01b8152600401620010a3939291906200313d565b602060405180830381865afa158015620010c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010e7919062002d52565b62001129576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200112090620031c3565b60405180910390fd5b620011348462001cbe565b50600b6000868152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a8154906effffffffffffffffffffffffffffff02191690556000820160106101000a8154906effffffffffffffffffffffffffffff021916905550506002600a600087815260200190815260200160002060006101000a81548160ff02191690836002811115620011dd57620011dc6200238d565b5b02179055505050505050565b620011f362001ea6565b60025460001c8160006005811062001210576200120f620028cf565b5b6020020181815250508660001c81600160058110620012345762001233620028cf565b5b6020020181815250508581600260058110620012555762001254620028cf565b5b6020020181815250508481600360058110620012765762001275620028cf565b5b6020020181815250508373ffffffffffffffffffffffffffffffffffffffff1681600460058110620012ad57620012ac620028cf565b5b6020020181815250508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462001327576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200131e9062002e8f565b60405180910390fd5b600160028111156200133e576200133d6200238d565b5b600a600089815260200190815260200160002060009054906101000a900460ff1660028111156200137457620013736200238d565b5b14620013b7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620013ae9062002b9e565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663839ded658285856040518463ffffffff1660e01b8152600401620014189392919062002f41565b602060405180830381865afa15801562001436573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200145c919062002d52565b6200149e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620014959062003235565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3086896040518463ffffffff1660e01b8152600401620014fd9392919062002ffa565b6020604051808303816000875af11580156200151d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001543919062002d52565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3086886040518463ffffffff1660e01b8152600401620015a39392919062002ffa565b6020604051808303816000875af1158015620015c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015e9919062002d52565b506002600a600089815260200190815260200160002060006101000a81548160ff021916908360028111156200162457620016236200238d565b5b021790555050505050505050565b600080303384604051620016469062001eea565b62001654939291906200327c565b604051809103906000f08015801562001671573d6000803e3d6000fd5b5090503373ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff167fcc811440ef7da41ce011c9fcb0d6aed3d646bfcaa6e1010ffcdd9196c752972e8386604051620016d5929190620032b9565b60405180910390a380915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900463ffffffff1663ffffffff1682106200176a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620017619062003336565b60405180910390fd5b6000801b9050919050565b60025481565b600081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b600360009054906101000a900463ffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6200180062001ef8565b6200180a62001f50565b600060018111156200182157620018206200238d565b5b85600001602081019062001836919062002926565b60018111156200184b576200184a6200238d565b5b0362001907577f0000000000000000000000000000000000000000000000000000000000000000816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050620019b8565b7f0000000000000000000000000000000000000000000000000000000000000000816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250507f0000000000000000000000000000000000000000000000000000000000000000816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b30816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505030816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084602001602081019062001a3d9190620029b4565b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681608001818152505060008160a001818152505060048160c0018181525050600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312aa3caf600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040516020016040516020818303038152906040528a8a6040518663ffffffff1660e01b815260040162001b1b959493929190620034ab565b60408051808303816000875af115801562001b3a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b6091906200350b565b9150915086600001602081019062001b79919062002926565b8460000190600181111562001b935762001b926200238d565b5b9081600181111562001baa5762001ba96200238d565b5b815250506000600181111562001bc55762001bc46200238d565b5b87600001602081019062001bda919062002926565b600181111562001bef5762001bee6200238d565b5b0362001c57578084602001906effffffffffffffffffffffffffffff1690816effffffffffffffffffffffffffffff16815250508184604001906effffffffffffffffffffffffffffff1690816effffffffffffffffffffffffffffff168152505062001cb4565b8084604001906effffffffffffffffffffffffffffff1690816effffffffffffffffffffffffffffff16815250508184602001906effffffffffffffffffffffffffffff1690816effffffffffffffffffffffffffffff16815250505b5050509392505050565b600080600360009054906101000a900463ffffffff16905060008054906101000a900463ffffffff16600262001cf59190620036d5565b63ffffffff168163ffffffff160362001d45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162001d3c9062003780565b60405180910390fd5b6000819050600084905060008060005b60008054906101000a900463ffffffff1663ffffffff168163ffffffff16101562001e4757600060028662001d8b9190620037d1565b63ffffffff160362001dd15783925062001dab8163ffffffff166200170c565b915083600160008363ffffffff1681526020019081526020016000208190555062001df1565b600160008263ffffffff1681526020019081526020016000205492508391505b62001e1e7f0000000000000000000000000000000000000000000000000000000000000000848462000ea5565b935060028562001e2f919062003809565b9450808062001e3e9062003841565b91505062001d55565b5060018562001e57919062003872565b600360006101000a81548163ffffffff021916908363ffffffff1602179055508495505050505050919050565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060a00160405280600590602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b61267280620038b283390190565b60405180606001604052806000600181111562001f1a5762001f196200238d565b5b815260200160006effffffffffffffffffffffffffffff16815260200160006effffffffffffffffffffffffffffff1681525090565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b600080fd5b600080fd5b6000819050919050565b620020048162001fef565b81146200201057600080fd5b50565b600081359050620020248162001ff9565b92915050565b600080fd5b6000604082840312156200204857620020476200202a565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011262002079576200207862002051565b5b8235905067ffffffffffffffff81111562002099576200209862002056565b5b602083019150836001820283011115620020b857620020b76200205b565b5b9250929050565b60008060008060008060a08789031215620020df57620020de62001fe5565b5b6000620020ef89828a0162002013565b96505060206200210289828a016200202f565b955050606087013567ffffffffffffffff81111562002126576200212562001fea565b5b6200213489828a0162002060565b9450945050608087013567ffffffffffffffff8111156200215a576200215962001fea565b5b6200216889828a0162002060565b92509250509295509295509295565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620021c2620021bc620021b68462002177565b62002197565b62002177565b9050919050565b6000620021d682620021a1565b9050919050565b6000620021ea82620021c9565b9050919050565b620021fc81620021dd565b82525050565b6000602082019050620022196000830184620021f1565b92915050565b60006200222c82620021c9565b9050919050565b6200223e816200221f565b82525050565b60006020820190506200225b600083018462002233565b92915050565b60006200226e82620021c9565b9050919050565b620022808162002261565b82525050565b60006020820190506200229d600083018462002275565b92915050565b6000819050919050565b620022b881620022a3565b82525050565b6000602082019050620022d56000830184620022ad565b92915050565b6000620022e882620021c9565b9050919050565b620022fa81620022db565b82525050565b6000602082019050620023176000830184620022ef565b92915050565b600063ffffffff82169050919050565b62002338816200231d565b82525050565b60006020820190506200235560008301846200232d565b92915050565b60006020828403121562002374576200237362001fe5565b5b6000620023848482850162002013565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110620023d057620023cf6200238d565b5b50565b6000819050620023e382620023bc565b919050565b6000620023f582620023d3565b9050919050565b6200240781620023e8565b82525050565b60006effffffffffffffffffffffffffffff82169050919050565b62002433816200240d565b82525050565b6000606082019050620024506000830186620023fc565b6200245f602083018562002428565b6200246e604083018462002428565b949350505050565b600381106200248a57620024896200238d565b5b50565b60008190506200249d8262002476565b919050565b6000620024af826200248d565b9050919050565b620024c181620024a2565b82525050565b6000602082019050620024de6000830184620024b6565b92915050565b620024ef81620022a3565b8114620024fb57600080fd5b50565b6000813590506200250f81620024e4565b92915050565b6000620025228262002177565b9050919050565b620025348162002515565b81146200254057600080fd5b50565b600081359050620025548162002529565b92915050565b60008060008060008060a087890312156200257a576200257962001fe5565b5b60006200258a89828a0162002013565b96505060206200259d89828a01620024fe565b9550506040620025b089828a01620024fe565b9450506060620025c389828a0162002543565b935050608087013567ffffffffffffffff811115620025e757620025e662001fea565b5b620025f589828a0162002060565b92509250509295509295509295565b60006200261182620021c9565b9050919050565b620026238162002604565b82525050565b600060208201905062002640600083018462002618565b92915050565b60006200265382620021c9565b9050919050565b620026658162002646565b82525050565b60006020820190506200268260008301846200265a565b92915050565b6000620026958262002515565b9050919050565b620026a78162002688565b8114620026b357600080fd5b50565b600081359050620026c7816200269c565b92915050565b600080600060608486031215620026e957620026e862001fe5565b5b6000620026f986828701620026b6565b93505060206200270c8682870162002013565b92505060406200271f8682870162002013565b9150509250925092565b620027348162001fef565b82525050565b600060208201905062002751600083018462002729565b92915050565b6000806000806060858703121562002774576200277362001fe5565b5b6000620027848782880162002013565b9450506020620027978782880162002013565b935050604085013567ffffffffffffffff811115620027bb57620027ba62001fea565b5b620027c98782880162002060565b925092505092959194509250565b6000620027e482620021c9565b9050919050565b620027f681620027d7565b82525050565b6000602082019050620028136000830184620027eb565b92915050565b60006200282682620021c9565b9050919050565b620028388162002819565b82525050565b60006020820190506200285560008301846200282d565b92915050565b60006020828403121562002874576200287362001fe5565b5b60006200288484828501620024fe565b91505092915050565b60006200289a82620021c9565b9050919050565b620028ac816200288d565b82525050565b6000602082019050620028c96000830184620028a1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600281106200290c57600080fd5b50565b6000813590506200292081620028fe565b92915050565b6000602082840312156200293f576200293e62001fe5565b5b60006200294f848285016200290f565b91505092915050565b60007effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6200298e8162002958565b81146200299a57600080fd5b50565b600081359050620029ae8162002983565b92915050565b600060208284031215620029cd57620029cc62001fe5565b5b6000620029dd848285016200299d565b91505092915050565b60008160f81b9050919050565b600062002a0082620029e6565b9050919050565b62002a1c62002a1682620023e8565b620029f3565b82525050565b60008160081b9050919050565b600062002a3c8262002a22565b9050919050565b62002a5862002a528262002958565b62002a2f565b82525050565b600062002a6c828562002a07565b60018201915062002a7e828462002a43565b601f820191508190509392505050565b600081519050919050565b6000819050602082019050919050565b600062002ab7825162001fef565b80915050919050565b600082821b905092915050565b600062002ada8262002a8e565b8262002ae68462002a99565b905062002af38162002aa9565b9250602082101562002b365762002b317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080262002ac0565b831692505b5050919050565b600082825260208201905092915050565b7f7472616e736163743a20696e76616c6964206e6f646520737461746500000000600082015250565b600062002b86601c8362002b3d565b915062002b938262002b4e565b602082019050919050565b6000602082019050818103600083015262002bb98162002b77565b9050919050565b600060049050919050565b600081905092915050565b6000819050919050565b62002beb81620022a3565b82525050565b600062002bff838362002be0565b60208301905092915050565b6000602082019050919050565b62002c238162002bc0565b62002c2f818462002bcb565b925062002c3c8262002bd6565b8060005b8381101562002c7357815162002c57878262002bf1565b965062002c648362002c0b565b92505060018101905062002c40565b505050505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600062002cba838562002c7b565b935062002cc983858462002c8c565b62002cd48362002c9b565b840190509392505050565b600060a08201905062002cf6600083018662002c18565b818103608083015262002d0b81848662002cac565b9050949350505050565b60008115159050919050565b62002d2c8162002d15565b811462002d3857600080fd5b50565b60008151905062002d4c8162002d21565b92915050565b60006020828403121562002d6b5762002d6a62001fe5565b5b600062002d7b8482850162002d3b565b91505092915050565b7f7472616e736163743a20766572696679206661696c6564000000000000000000600082015250565b600062002dbc60178362002b3d565b915062002dc98262002d84565b602082019050919050565b6000602082019050818103600083015262002def8162002dad565b9050919050565b60008151905062002e078162001ff9565b92915050565b60006020828403121562002e265762002e2562001fe5565b5b600062002e368482850162002df6565b91505092915050565b7f7661756c74206e6f74206d617463680000000000000000000000000000000000600082015250565b600062002e77600f8362002b3d565b915062002e848262002e3f565b602082019050919050565b6000602082019050818103600083015262002eaa8162002e68565b9050919050565b600060059050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b62002ee98162002eb1565b62002ef5818462002ebc565b925062002f028262002ec7565b8060005b8381101562002f3957815162002f1d878262002bf1565b965062002f2a8362002ed1565b92505060018101905062002f06565b505050505050565b600060c08201905062002f58600083018662002ede565b81810360a083015262002f6d81848662002cac565b9050949350505050565b7f6465706f7369743a20766572696679206661696c656400000000000000000000600082015250565b600062002faf60168362002b3d565b915062002fbc8262002f77565b602082019050919050565b6000602082019050818103600083015262002fe28162002fa0565b9050919050565b62002ff48162002515565b82525050565b600060608201905062003011600083018662002fe9565b62003020602083018562002fe9565b6200302f6040830184620022ad565b949350505050565b60006040820190506200304e6000830185620022ad565b6200305d6020830184620022ad565b9392505050565b6000815190506200307581620024e4565b92915050565b60006020828403121562003094576200309362001fe5565b5b6000620030a48482850162003064565b91505092915050565b600060039050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b620030e581620030ad565b620030f18184620030b8565b9250620030fe82620030c3565b8060005b838110156200313557815162003119878262002bf1565b96506200312683620030cd565b92505060018101905062003102565b505050505050565b6000608082019050620031546000830186620030da565b81810360608301526200316981848662002cac565b9050949350505050565b7f66696e616c697a653a20766572696679206661696c6564000000000000000000600082015250565b6000620031ab60178362002b3d565b9150620031b88262003173565b602082019050919050565b60006020820190508181036000830152620031de816200319c565b9050919050565b7f77697468647261773a20766572696679206661696c6564000000000000000000600082015250565b60006200321d60178362002b3d565b91506200322a82620031e5565b602082019050919050565b6000602082019050818103600083015262003250816200320e565b9050919050565b60006200326482620021c9565b9050919050565b620032768162003257565b82525050565b60006060820190506200329360008301866200326b565b620032a2602083018562002fe9565b620032b1604083018462002729565b949350505050565b6000604082019050620032d0600083018562002fe9565b620032df602083018462002729565b9392505050565b7f696e646578206f7574206f6620626f756e640000000000000000000000000000600082015250565b60006200331e60128362002b3d565b91506200332b82620032e6565b602082019050919050565b6000602082019050818103600083015262003351816200330f565b9050919050565b60006200336582620021c9565b9050919050565b620033778162003358565b82525050565b60006200338a8262002177565b9050919050565b6200339c816200337d565b82525050565b60e082016000820151620033ba60008501826200336c565b506020820151620033cf60208501826200336c565b506040820151620033e4604085018262003391565b506060820151620033f9606085018262003391565b5060808201516200340e608085018262002be0565b5060a08201516200342360a085018262002be0565b5060c08201516200343860c085018262002be0565b50505050565b60005b838110156200345e57808201518184015260208101905062003441565b60008484015250505050565b6000620034778262002a8e565b62003483818562002c7b565b9350620034958185602086016200343e565b620034a08162002c9b565b840191505092915050565b600061014082019050620034c360008301886200282d565b620034d26020830187620033a2565b818103610100830152620034e781866200346a565b9050818103610120830152620034ff81848662002cac565b90509695505050505050565b6000806040838503121562003525576200352462001fe5565b5b6000620035358582860162003064565b9250506020620035488582860162003064565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620035e057808604811115620035b857620035b762003552565b5b6001851615620035c85780820291505b8081029050620035d88562003581565b945062003598565b94509492505050565b600082620035fb5760019050620036ce565b816200360b5760009050620036ce565b81600181146200362457600281146200362f5762003665565b6001915050620036ce565b60ff84111562003644576200364362003552565b5b8360020a9150848211156200365e576200365d62003552565b5b50620036ce565b5060208310610133831016604e8410600b84101617156200369f5782820a90508381111562003699576200369862003552565b5b620036ce565b620036ae84848460016200358e565b92509050818404811115620036c857620036c762003552565b5b81810290505b9392505050565b6000620036e2826200231d565b9150620036ef836200231d565b92506200370263ffffffff8484620035e9565b905092915050565b7f4d65726b6c6520747265652069732066756c6c2e204e6f206d6f7265206c656160008201527f7665732063616e20626520616464656400000000000000000000000000000000602082015250565b60006200376860308362002b3d565b915062003775826200370a565b604082019050919050565b600060208201905081810360008301526200379b8162003759565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000620037de826200231d565b9150620037eb836200231d565b925082620037fe57620037fd620037a2565b5b828206905092915050565b600062003816826200231d565b915062003823836200231d565b925082620038365762003835620037a2565b5b828204905092915050565b60006200384e826200231d565b915063ffffffff820362003867576200386662003552565b5b600182019050919050565b60006200387f826200231d565b91506200388c836200231d565b9250828201905063ffffffff811115620038ab57620038aa62003552565b5b9291505056fe60a06040523480156200001157600080fd5b506040516200267238038062002672833981810160405281019062000037919062000202565b81806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806001819055505050506200025e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014a826200011d565b9050919050565b60006200015e826200013d565b9050919050565b620001708162000151565b81146200017c57600080fd5b50565b600081519050620001908162000165565b92915050565b620001a1816200013d565b8114620001ad57600080fd5b50565b600081519050620001c18162000196565b92915050565b6000819050919050565b620001dc81620001c7565b8114620001e857600080fd5b50565b600081519050620001fc81620001d1565b92915050565b6000806000606084860312156200021e576200021d62000118565b5b60006200022e868287016200017f565b93505060206200024186828701620001b0565b92505060406200025486828701620001eb565b9150509250925092565b608051612381620002f1600039600081816103000152818161051d01528181610636015281816106e2015281816107e601528181610892015281816109a101528181610aaf01528181610bbb01528181610cb101528181610dfe01528181610e9501528181610fae0152818161105a0152818161115e0152818161120a01528181611317015261162501526123816000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806391daa9021161007157806391daa90214610179578063926323d514610197578063b2b4e62f146101b5578063c19d93fb146101d3578063f2fde38b146101f1578063f868e7661461020d576100b4565b80630542631b146100b95780630af94415146100d5578063556a6d8a146100f15780638406c079146101215780638da5cb5b1461013f578063904c44101461015d575b600080fd5b6100d360048036038101906100ce919061180f565b610229565b005b6100ef60048036038101906100ea91906118d7565b610414565b005b61010b6004803603810190610106919061180f565b610c97565b6040516101189190611985565b60405180910390f35b610129610caf565b60405161013691906119ff565b60405180910390f35b610147610cd3565b6040516101549190611a29565b60405180910390f35b61017760048036038101906101729190611a70565b610cf7565b005b61018161145c565b60405161018e9190611985565b60405180910390f35b61019f611462565b6040516101ac9190611985565b60405180910390f35b6101bd611468565b6040516101ca9190611b3b565b60405180910390f35b6101db61146e565b6040516101e89190611bcd565b60405180910390f35b61020b6004803603810190610206919061180f565b611481565b005b61022760048036038101906102229190611be8565b6115ac565b005b600280600281111561023e5761023d611b56565b5b600560009054906101000a900460ff1660028111156102605761025f611b56565b5b146102a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029790611c72565b60405180910390fd5b6000600354600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546004546102f29190611cc1565b6102fc9190611d32565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ff709ee86040518163ffffffff1660e01b81526004016020604051808303816000875af115801561036b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038f9190611da1565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3085846040518463ffffffff1660e01b81526004016103cb93929190611dce565b6020604051808303816000875af11580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e9190611e3d565b50505050565b600080600281111561042957610428611b56565b5b600560009054906101000a900460ff16600281111561044b5761044a611b56565b5b1461048b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048290611c72565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051090611eb6565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ff709ee86040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ac9190611da1565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105e49190611a29565b602060405180830381865afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106259190611eeb565b905060006040518060e001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ff709ee86040518163ffffffff1660e01b81526004016020604051808303816000875af11580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190611da1565b73ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663499f712e6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190611da1565b73ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016002846107d19190611d32565b815260200160008152602001600481525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166339cfe5ff6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108759190611f56565b73ffffffffffffffffffffffffffffffffffffffff166312aa3caf7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dcea75ee6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156108fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109219190611fc1565b8360405160200160405160208183030381529060405289896040518663ffffffff1660e01b81526004016109599594939291906121ba565b60408051808303816000875af1158015610977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099b9190612212565b505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ff709ee86040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190611da1565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a689190611a29565b602060405180830381865afa158015610a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa99190611eeb565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663499f712e6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3e9190611da1565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b769190611a29565b602060405180830381865afa158015610b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb79190611eeb565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663823db3d28b8484308e8e6040518763ffffffff1660e01b8152600401610c1c96959493929190612252565b6020604051808303816000875af1158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906122ea565b506001600560006101000a81548160ff02191690836002811115610c8657610c85611b56565b5b021790555050505050505050505050565b60026020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001806002811115610d0c57610d0b611b56565b5b600560009054906101000a900460ff166002811115610d2e57610d2d611b56565b5b14610d6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6590611c72565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df390611eb6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b5239f898989308a8a6040518763ffffffff1660e01b8152600401610e5f96959493929190612252565b600060405180830381600087803b158015610e7957600080fd5b505af1158015610e8d573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663499f712e6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f249190611da1565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f5c9190611a29565b602060405180830381865afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d9190611eeb565b905060006040518060e001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663499f712e6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d9190611da1565b73ffffffffffffffffffffffffffffffffffffffff1681526020017f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ff709ee86040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e99190611da1565b73ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681526020016002846111499190611d32565b815260200160008152602001600481525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166339cfe5ff6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156111c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ed9190611f56565b73ffffffffffffffffffffffffffffffffffffffff166312aa3caf7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dcea75ee6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190611fc1565b8360405160200160405160208183030381529060405289896040518663ffffffff1660e01b81526004016112d19594939291906121ba565b60408051808303816000875af11580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190612212565b50507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ff709ee86040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a69190611da1565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113de9190611a29565b602060405180830381865afa1580156113fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141f9190611eeb565b6004819055506002600560006101000a81548160ff0219169083600281111561144b5761144a611b56565b5b021790555050505050505050505050565b60045481565b60035481565b60015481565b600560009054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150690611eb6565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060028111156115c1576115c0611b56565b5b600560009054906101000a900460ff1660028111156115e3576115e2611b56565b5b14611623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161a90611c72565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ff709ee86040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b49190611da1565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016116f093929190611dce565b6020604051808303816000875af115801561170f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117339190611e3d565b5081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117839190612317565b92505081905550816003600082825461179c9190612317565b925050819055505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117dc826117b1565b9050919050565b6117ec816117d1565b81146117f757600080fd5b50565b600081359050611809816117e3565b92915050565b600060208284031215611825576118246117a7565b5b6000611833848285016117fa565b91505092915050565b6000819050919050565b61184f8161183c565b811461185a57600080fd5b50565b60008135905061186c81611846565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261189757611896611872565b5b8235905067ffffffffffffffff8111156118b4576118b3611877565b5b6020830191508360018202830111156118d0576118cf61187c565b5b9250929050565b6000806000806000606086880312156118f3576118f26117a7565b5b60006119018882890161185d565b955050602086013567ffffffffffffffff811115611922576119216117ac565b5b61192e88828901611881565b9450945050604086013567ffffffffffffffff811115611951576119506117ac565b5b61195d88828901611881565b92509250509295509295909350565b6000819050919050565b61197f8161196c565b82525050565b600060208201905061199a6000830184611976565b92915050565b6000819050919050565b60006119c56119c06119bb846117b1565b6119a0565b6117b1565b9050919050565b60006119d7826119aa565b9050919050565b60006119e9826119cc565b9050919050565b6119f9816119de565b82525050565b6000602082019050611a1460008301846119f0565b92915050565b611a23816117d1565b82525050565b6000602082019050611a3e6000830184611a1a565b92915050565b611a4d8161196c565b8114611a5857600080fd5b50565b600081359050611a6a81611a44565b92915050565b600080600080600080600060a0888a031215611a8f57611a8e6117a7565b5b6000611a9d8a828b0161185d565b9750506020611aae8a828b01611a5b565b9650506040611abf8a828b01611a5b565b955050606088013567ffffffffffffffff811115611ae057611adf6117ac565b5b611aec8a828b01611881565b9450945050608088013567ffffffffffffffff811115611b0f57611b0e6117ac565b5b611b1b8a828b01611881565b925092505092959891949750929550565b611b358161183c565b82525050565b6000602082019050611b506000830184611b2c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611b9657611b95611b56565b5b50565b6000819050611ba782611b85565b919050565b6000611bb782611b99565b9050919050565b611bc781611bac565b82525050565b6000602082019050611be26000830184611bbe565b92915050565b600060208284031215611bfe57611bfd6117a7565b5b6000611c0c84828501611a5b565b91505092915050565b600082825260208201905092915050565b7f496e76616c6964205661756c7420737461746500000000000000000000000000600082015250565b6000611c5c601383611c15565b9150611c6782611c26565b602082019050919050565b60006020820190508181036000830152611c8b81611c4f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611ccc8261196c565b9150611cd78361196c565b9250828202611ce58161196c565b91508282048414831517611cfc57611cfb611c92565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d3d8261196c565b9150611d488361196c565b925082611d5857611d57611d03565b5b828204905092915050565b6000611d6e826117d1565b9050919050565b611d7e81611d63565b8114611d8957600080fd5b50565b600081519050611d9b81611d75565b92915050565b600060208284031215611db757611db66117a7565b5b6000611dc584828501611d8c565b91505092915050565b6000606082019050611de36000830186611a1a565b611df06020830185611a1a565b611dfd6040830184611976565b949350505050565b60008115159050919050565b611e1a81611e05565b8114611e2557600080fd5b50565b600081519050611e3781611e11565b92915050565b600060208284031215611e5357611e526117a7565b5b6000611e6184828501611e28565b91505092915050565b7f554e415554484f52495a45440000000000000000000000000000000000000000600082015250565b6000611ea0600c83611c15565b9150611eab82611e6a565b602082019050919050565b60006020820190508181036000830152611ecf81611e93565b9050919050565b600081519050611ee581611a44565b92915050565b600060208284031215611f0157611f006117a7565b5b6000611f0f84828501611ed6565b91505092915050565b6000611f23826117d1565b9050919050565b611f3381611f18565b8114611f3e57600080fd5b50565b600081519050611f5081611f2a565b92915050565b600060208284031215611f6c57611f6b6117a7565b5b6000611f7a84828501611f41565b91505092915050565b6000611f8e826117d1565b9050919050565b611f9e81611f83565b8114611fa957600080fd5b50565b600081519050611fbb81611f95565b92915050565b600060208284031215611fd757611fd66117a7565b5b6000611fe584828501611fac565b91505092915050565b6000611ff9826119cc565b9050919050565b61200981611fee565b82525050565b600061201a826119cc565b9050919050565b61202a8161200f565b82525050565b600061203b826117b1565b9050919050565b61204b81612030565b82525050565b61205a8161196c565b82525050565b60e0820160008201516120766000850182612021565b5060208201516120896020850182612021565b50604082015161209c6040850182612042565b5060608201516120af6060850182612042565b5060808201516120c26080850182612051565b5060a08201516120d560a0850182612051565b5060c08201516120e860c0850182612051565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561212857808201518184015260208101905061210d565b60008484015250505050565b6000601f19601f8301169050919050565b6000612150826120ee565b61215a81856120f9565b935061216a81856020860161210a565b61217381612134565b840191505092915050565b82818337600083830152505050565b600061219983856120f9565b93506121a683858461217e565b6121af83612134565b840190509392505050565b6000610140820190506121d06000830188612000565b6121dd6020830187612060565b8181036101008301526121f08186612145565b905081810361012083015261220681848661218d565b90509695505050505050565b60008060408385031215612229576122286117a7565b5b600061223785828601611ed6565b925050602061224885828601611ed6565b9150509250929050565b600060a0820190506122676000830189611b2c565b6122746020830188611976565b6122816040830187611976565b61228e6060830186611a1a565b81810360808301526122a181848661218d565b9050979650505050505050565b600063ffffffff82169050919050565b6122c7816122ae565b81146122d257600080fd5b50565b6000815190506122e4816122be565b92915050565b600060208284031215612300576122ff6117a7565b5b600061230e848285016122d5565b91505092915050565b60006123228261196c565b915061232d8361196c565b925082820190508082111561234557612344611c92565b5b9291505056fea2646970667358221220f3c213baf80a144180193fcc804901176057f1b541fd5a6836d197c2e72a937d64736f6c63430008110033a26469706673582212202b3aa83004f30d125ab7164d71cfdf3afef781f271367d8efd3671bf82ac102264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "hashLeftRight(address,bytes32,bytes32)": {
        "details": "Hash 2 tree leaves, returns MiMC(_left, _right)"
      },
      "zeros(uint256)": {
        "details": "provides Zero (Empty) elements for a MiMC MerkleTree. Up to 32 levels"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 76,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "levels",
        "offset": 0,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 80,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 82,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "root",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 85,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "nextIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 357,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "depositVerifier",
        "offset": 4,
        "slot": "3",
        "type": "t_contract(IDepositVerifier)13"
      },
      {
        "astId": 360,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "withdrawVerifier",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IWithdrawVerifier)25"
      },
      {
        "astId": 363,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "swapVerifier",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISwapVerifier)37"
      },
      {
        "astId": 366,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "finalizeVerifier",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IFinalizeVerifier)49"
      },
      {
        "astId": 369,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "genericRouter",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IGenericRouter)1593"
      },
      {
        "astId": 372,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "genericExecutor",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IAggregationExecutor)1575"
      },
      {
        "astId": 375,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "modelInput",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(ModelInput)336_storage"
      },
      {
        "astId": 380,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "nodeStatusPool",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_enum(NodeStatus)324)"
      },
      {
        "astId": 385,
        "contract": "contracts/Relayer.sol:Relayer",
        "label": "transactionResults",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(TxResult)344_storage)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAggregationExecutor)1575": {
        "encoding": "inplace",
        "label": "contract IAggregationExecutor",
        "numberOfBytes": "20"
      },
      "t_contract(IDepositVerifier)13": {
        "encoding": "inplace",
        "label": "contract IDepositVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(IFinalizeVerifier)49": {
        "encoding": "inplace",
        "label": "contract IFinalizeVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(IGenericRouter)1593": {
        "encoding": "inplace",
        "label": "contract IGenericRouter",
        "numberOfBytes": "20"
      },
      "t_contract(ISwapVerifier)37": {
        "encoding": "inplace",
        "label": "contract ISwapVerifier",
        "numberOfBytes": "20"
      },
      "t_contract(IWithdrawVerifier)25": {
        "encoding": "inplace",
        "label": "contract IWithdrawVerifier",
        "numberOfBytes": "20"
      },
      "t_enum(NodeStatus)324": {
        "encoding": "inplace",
        "label": "enum NodeStatus",
        "numberOfBytes": "1"
      },
      "t_enum(SwapDirection)327": {
        "encoding": "inplace",
        "label": "enum SwapDirection",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_enum(NodeStatus)324)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => enum NodeStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(NodeStatus)324"
      },
      "t_mapping(t_bytes32,t_struct(TxResult)344_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TxResult)",
        "numberOfBytes": "32",
        "value": "t_struct(TxResult)344_storage"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(ModelInput)336_storage": {
        "encoding": "inplace",
        "label": "struct ModelInput",
        "members": [
          {
            "astId": 335,
            "contract": "contracts/Relayer.sol:Relayer",
            "label": "chainlinkPrice",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TxResult)344_storage": {
        "encoding": "inplace",
        "label": "struct TxResult",
        "members": [
          {
            "astId": 339,
            "contract": "contracts/Relayer.sol:Relayer",
            "label": "direction",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SwapDirection)327"
          },
          {
            "astId": 341,
            "contract": "contracts/Relayer.sol:Relayer",
            "label": "amountA",
            "offset": 1,
            "slot": "0",
            "type": "t_uint120"
          },
          {
            "astId": 343,
            "contract": "contracts/Relayer.sol:Relayer",
            "label": "amountB",
            "offset": 16,
            "slot": "0",
            "type": "t_uint120"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint120": {
        "encoding": "inplace",
        "label": "uint120",
        "numberOfBytes": "15"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}