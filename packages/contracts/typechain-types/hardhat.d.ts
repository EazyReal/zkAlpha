/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IAggregationExecutor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAggregationExecutor__factory>;
    getContractFactory(
      name: "IGenericRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGenericRouter__factory>;
    getContractFactory(
      name: "ICreate3Deployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICreate3Deployer__factory>;
    getContractFactory(
      name: "IDaiLikePermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDaiLikePermit__factory>;
    getContractFactory(
      name: "IERC20MetadataUppercase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUppercase__factory>;
    getContractFactory(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPermit2__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IDepositVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositVerifier__factory>;
    getContractFactory(
      name: "IFinalizeVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFinalizeVerifier__factory>;
    getContractFactory(
      name: "ISwapVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapVerifier__factory>;
    getContractFactory(
      name: "IWithdrawVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWithdrawVerifier__factory>;
    getContractFactory(
      name: "AddressArray",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressArray__factory>;
    getContractFactory(
      name: "RevertReasonParser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RevertReasonParser__factory>;
    getContractFactory(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeERC20__factory>;
    getContractFactory(
      name: "UniERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniERC20__factory>;
    getContractFactory(
      name: "IHasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasher__factory>;
    getContractFactory(
      name: "MerkleTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTree__factory>;
    getContractFactory(
      name: "Relayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Relayer__factory>;
    getContractFactory(
      name: "IRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayer__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;

    getContractAt(
      name: "IAggregationExecutor",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAggregationExecutor>;
    getContractAt(
      name: "IGenericRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGenericRouter>;
    getContractAt(
      name: "ICreate3Deployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ICreate3Deployer>;
    getContractAt(
      name: "IDaiLikePermit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDaiLikePermit>;
    getContractAt(
      name: "IERC20MetadataUppercase",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUppercase>;
    getContractAt(
      name: "IPermit2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPermit2>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IDepositVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositVerifier>;
    getContractAt(
      name: "IFinalizeVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFinalizeVerifier>;
    getContractAt(
      name: "ISwapVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapVerifier>;
    getContractAt(
      name: "IWithdrawVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWithdrawVerifier>;
    getContractAt(
      name: "AddressArray",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressArray>;
    getContractAt(
      name: "RevertReasonParser",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RevertReasonParser>;
    getContractAt(
      name: "SafeERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeERC20>;
    getContractAt(
      name: "UniERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UniERC20>;
    getContractAt(
      name: "IHasher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasher>;
    getContractAt(
      name: "MerkleTree",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTree>;
    getContractAt(
      name: "Relayer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Relayer>;
    getContractAt(
      name: "IRelayer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayer>;
    getContractAt(
      name: "Vault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
    getContractAt(
      name: "IERC1271",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Owned",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;

    deployContract(
      name: "IAggregationExecutor",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregationExecutor>;
    deployContract(
      name: "IGenericRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGenericRouter>;
    deployContract(
      name: "ICreate3Deployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICreate3Deployer>;
    deployContract(
      name: "IDaiLikePermit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDaiLikePermit>;
    deployContract(
      name: "IERC20MetadataUppercase",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUppercase>;
    deployContract(
      name: "IPermit2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IDepositVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDepositVerifier>;
    deployContract(
      name: "IFinalizeVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFinalizeVerifier>;
    deployContract(
      name: "ISwapVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapVerifier>;
    deployContract(
      name: "IWithdrawVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawVerifier>;
    deployContract(
      name: "AddressArray",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressArray>;
    deployContract(
      name: "RevertReasonParser",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertReasonParser>;
    deployContract(
      name: "SafeERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "UniERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniERC20>;
    deployContract(
      name: "IHasher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHasher>;
    deployContract(
      name: "MerkleTree",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleTree>;
    deployContract(
      name: "Relayer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Relayer>;
    deployContract(
      name: "IRelayer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelayer>;
    deployContract(
      name: "Vault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vault>;
    deployContract(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Owned",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Owned>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;

    deployContract(
      name: "IAggregationExecutor",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAggregationExecutor>;
    deployContract(
      name: "IGenericRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGenericRouter>;
    deployContract(
      name: "ICreate3Deployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ICreate3Deployer>;
    deployContract(
      name: "IDaiLikePermit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDaiLikePermit>;
    deployContract(
      name: "IERC20MetadataUppercase",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20MetadataUppercase>;
    deployContract(
      name: "IPermit2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPermit2>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "IDepositVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDepositVerifier>;
    deployContract(
      name: "IFinalizeVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFinalizeVerifier>;
    deployContract(
      name: "ISwapVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISwapVerifier>;
    deployContract(
      name: "IWithdrawVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWithdrawVerifier>;
    deployContract(
      name: "AddressArray",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AddressArray>;
    deployContract(
      name: "RevertReasonParser",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RevertReasonParser>;
    deployContract(
      name: "SafeERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeERC20>;
    deployContract(
      name: "UniERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UniERC20>;
    deployContract(
      name: "IHasher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHasher>;
    deployContract(
      name: "MerkleTree",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleTree>;
    deployContract(
      name: "Relayer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Relayer>;
    deployContract(
      name: "IRelayer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelayer>;
    deployContract(
      name: "Vault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vault>;
    deployContract(
      name: "IERC1271",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1271>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Owned",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Owned>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
