/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MerkleTree,
  MerkleTreeInterface,
} from "../../../contracts/MerkleTree.sol/MerkleTree";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_levels",
        type: "uint32",
      },
      {
        internalType: "contract IHasher",
        name: "_hasher",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FIELD_SIZE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZERO_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "filledSubtrees",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IHasher",
        name: "_hasher",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_left",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_right",
        type: "bytes32",
      },
    ],
    name: "hashLeftRight",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "hasher",
    outputs: [
      {
        internalType: "contract IHasher",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "levels",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "zeros",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040526000600360006101000a81548163ffffffff021916908363ffffffff1602179055503480156200003357600080fd5b5060405162000c8038038062000c80833981810160405281019062000059919062000303565b60008263ffffffff1611620000a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200009c90620003d1565b60405180910390fd5b60208263ffffffff1610620000f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e89062000443565b60405180910390fd5b816000806101000a81548163ffffffff021916908363ffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060005b8263ffffffff168163ffffffff161015620001a757620001748163ffffffff16620001db60201b60201c565b600160008363ffffffff1681526020019081526020016000208190555080806200019e9062000494565b91505062000148565b50620001cd600183620001bb9190620004c5565b63ffffffff16620001db60201b60201c565b600281905550505062000576565b60008060009054906101000a900463ffffffff1663ffffffff16821062000239576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002309062000554565b60405180910390fd5b6000801b9050919050565b600080fd5b600063ffffffff82169050919050565b620002648162000249565b81146200027057600080fd5b50565b600081519050620002848162000259565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002b7826200028a565b9050919050565b6000620002cb82620002aa565b9050919050565b620002dd81620002be565b8114620002e957600080fd5b50565b600081519050620002fd81620002d2565b92915050565b600080604083850312156200031d576200031c62000244565b5b60006200032d8582860162000273565b92505060206200034085828601620002ec565b9150509250929050565b600082825260208201905092915050565b7f5f6c6576656c732073686f756c642062652067726561746572207468616e207a60008201527f65726f0000000000000000000000000000000000000000000000000000000000602082015250565b6000620003b96023836200034a565b9150620003c6826200035b565b604082019050919050565b60006020820190508181036000830152620003ec81620003aa565b9050919050565b7f5f6c6576656c732073686f756c64206265206c657373207468616e2033320000600082015250565b60006200042b601e836200034a565b91506200043882620003f3565b602082019050919050565b600060208201905081810360008301526200045e816200041c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004a18262000249565b915063ffffffff8203620004ba57620004b962000465565b5b600182019050919050565b6000620004d28262000249565b9150620004df8362000249565b9250828203905063ffffffff811115620004fe57620004fd62000465565b5b92915050565b7f696e646578206f7574206f6620626f756e640000000000000000000000000000600082015250565b60006200053c6012836200034a565b9150620005498262000504565b602082019050919050565b600060208201905081810360008301526200056f816200052d565b9050919050565b6080516106ee62000592600039600061031701526106ee6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063ebf0c71711610066578063ebf0c71714610134578063ec73295914610152578063ed33639f14610170578063f178e47c1461018e578063fc7e9c6f146101be57610093565b8063414a37ba146100985780634ecf518b146100b65780638ea3099e146100d4578063e829558814610104575b600080fd5b6100a06101dc565b6040516100ad9190610380565b60405180910390f35b6100be610200565b6040516100cb91906103ba565b60405180910390f35b6100ee60048036038101906100e99190610480565b610214565b6040516100fb91906104e2565b60405180910390f35b61011e60048036038101906101199190610529565b6102a4565b60405161012b91906104e2565b60405180910390f35b61013c61030a565b60405161014991906104e2565b60405180910390f35b61015a610310565b6040516101679190610380565b60405180910390f35b610178610315565b60405161018591906105b5565b60405180910390f35b6101a860048036038101906101a39190610529565b610339565b6040516101b591906104e2565b60405180910390f35b6101c6610351565b6040516101d391906103ba565b60405180910390f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b60008054906101000a900463ffffffff1681565b60008373ffffffffffffffffffffffffffffffffffffffff1663a78dac0d8460001c8460001c6040518363ffffffff1660e01b81526004016102579291906105d0565b602060405180830381865afa158015610274573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610298919061060e565b60001b90509392505050565b60008060009054906101000a900463ffffffff1663ffffffff1682106102ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f690610698565b60405180910390fd5b6000801b9050919050565b60025481565b600081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b600360009054906101000a900463ffffffff1681565b6000819050919050565b61037a81610367565b82525050565b60006020820190506103956000830184610371565b92915050565b600063ffffffff82169050919050565b6103b48161039b565b82525050565b60006020820190506103cf60008301846103ab565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610405826103da565b9050919050565b6000610417826103fa565b9050919050565b6104278161040c565b811461043257600080fd5b50565b6000813590506104448161041e565b92915050565b6000819050919050565b61045d8161044a565b811461046857600080fd5b50565b60008135905061047a81610454565b92915050565b600080600060608486031215610499576104986103d5565b5b60006104a786828701610435565b93505060206104b88682870161046b565b92505060406104c98682870161046b565b9150509250925092565b6104dc8161044a565b82525050565b60006020820190506104f760008301846104d3565b92915050565b61050681610367565b811461051157600080fd5b50565b600081359050610523816104fd565b92915050565b60006020828403121561053f5761053e6103d5565b5b600061054d84828501610514565b91505092915050565b6000819050919050565b600061057b610576610571846103da565b610556565b6103da565b9050919050565b600061058d82610560565b9050919050565b600061059f82610582565b9050919050565b6105af81610594565b82525050565b60006020820190506105ca60008301846105a6565b92915050565b60006040820190506105e56000830185610371565b6105f26020830184610371565b9392505050565b600081519050610608816104fd565b92915050565b600060208284031215610624576106236103d5565b5b6000610632848285016105f9565b91505092915050565b600082825260208201905092915050565b7f696e646578206f7574206f6620626f756e640000000000000000000000000000600082015250565b600061068260128361063b565b915061068d8261064c565b602082019050919050565b600060208201905081810360008301526106b181610675565b905091905056fea2646970667358221220d6674c2a41883c0e25d80fac359c0c1b9bf329a764e24398bd0cf537b3aa330b64736f6c63430008110033";

type MerkleTreeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleTreeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleTree__factory extends ContractFactory {
  constructor(...args: MerkleTreeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _levels: BigNumberish,
    _hasher: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_levels, _hasher, overrides || {});
  }
  override deploy(
    _levels: BigNumberish,
    _hasher: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_levels, _hasher, overrides || {}) as Promise<
      MerkleTree & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MerkleTree__factory {
    return super.connect(runner) as MerkleTree__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleTreeInterface {
    return new Interface(_abi) as MerkleTreeInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MerkleTree {
    return new Contract(address, _abi, runner) as unknown as MerkleTree;
  }
}
